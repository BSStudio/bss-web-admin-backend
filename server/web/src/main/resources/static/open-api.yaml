openapi: 3.0.0
info:
  title: BSS Web admin API
  description: BSS Web admin API
  version: 1.0.0
  contact:
    name: Bence Csik
    url: https://github.com/csikb
servers:
- description: Local
  url: /
- description: Integration
  url: https://dev-admin.bsstudio.hu
- description: Production
  url: https://admin.bsstudio.hu
tags:
- name: Member
  description: REST operations for members
- name: Video
  description: REST operations for videos
- name: VideoCrew
  description: REST operations for video crews
- name: Label
  description: REST operations for labels
- name: Event
  description: REST operations for events
- name: EventVideo
  description: REST operations for event videos
- name: Metrics
  description: REST operations for metrics
paths:
  /api/v1/member:
    post:
      operationId: createMember
      summary: Create member
      description: Create member
      tags:
      - Member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMember'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
    get:
      operationId: getAllMembers
      summary: Read all member
      description: Read all member
      tags:
      - Member
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
  /api/v1/member/{memberId}:
    put:
      operationId: updateMember
      summary: Update member
      description: Update member
      tags:
      - Member
      parameters:
      - $ref: '#/components/parameters/memberId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMember'
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
    get:
      operationId: getMemberById
      summary: Read one member
      description: Read one member
      tags:
      - Member
      parameters:
      - $ref: '#/components/parameters/memberId'
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
    delete:
      operationId: removeMember
      summary: Delete member
      description: Delete member
      tags:
      - Member
      parameters:
      - $ref: '#/components/parameters/memberId'
      responses:
        "204":
          description: No content
  /api/v1/video:
    post:
      operationId: createVideo
      summary: Create video
      description: Create video
      tags:
      - Video
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVideo'
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
    get:
      operationId: getAllVideos
      summary: Read all video (paginated)
      description: Read all video (paginated)
      tags:
      - Video
      parameters:
      - name: size
        in: query
        required: false
        schema:
          type: integer
      - name: page
        in: query
        required: false
        schema:
          type: integer
      - name: sort
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - type: object
                  properties:
                    content:
                      type: array
                      items:
                        $ref: '#/components/schemas/Video'
                - $ref: '#/components/schemas/Page'
  /api/v1/video/visible:
    put:
      operationId: changeVideoVisibility
      summary: Change video visibility
      description: Change video visibility
      tags:
      - Video
      parameters:
      - name: videoIds
        in: query
        required: true
        explode: false
        schema:
          type: array
          items:
            type: string
            format: uuid
      - name: visible
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/video/{videoId}:
    put:
      operationId: updateVideo
      summary: Update video
      description: Update video
      tags:
      - Video
      parameters:
      - $ref: '#/components/parameters/videoId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVideo'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedVideo'
    get:
      operationId: getVideo
      summary: Read one video
      description: Read one video
      tags:
      - Video
      parameters:
      - $ref: '#/components/parameters/videoId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedVideo'
    delete:
      operationId: deleteVideo
      summary: Delete video
      description: Delete video
      tags:
      - Video
      parameters:
      - $ref: '#/components/parameters/videoId'
      responses:
        "204":
          description: No content
  /api/v1/videoCrew:
    put:
      operationId: addPosition
      summary: Add position with member to the video
      description: Add position with member to the video
      tags:
      - VideoCrew
      parameters:
      - name: videoId
        in: query
        required: true
        schema:
          type: string
      - name: position
        in: query
        required: true
        schema:
          type: string
      - name: memberId
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedVideo'
        "404":
          description: Not found
    delete:
      operationId: removePosition
      summary: Delete position with member to the video
      description: Delete position with member to the video
      tags:
      - VideoCrew
      parameters:
      - name: videoId
        in: query
        required: true
        schema:
          type: string
          format: uuid
      - name: position
        in: query
        required: true
        schema:
          type: string
      - name: memberId
        in: query
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedVideo'
        "404":
          description: Not found
  /api/v1/label:
    post:
      operationId: createLabel
      summary: Create label
      description: Create label
      tags:
      - Label
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabel'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
    get:
      operationId: getAllLabels
      summary: Read all label
      description: Read all label
      tags:
      - Label
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
  /api/v1/label/{labelId}:
    delete:
      operationId: removeLabel
      summary: Delete label
      description: Delete label
      tags:
      - Label
      parameters:
      - name: labelId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "204":
          description: No content
  /api/v1/event:
    get:
      operationId: findAllEvent
      summary: Read all event
      description: Read all event
      tags:
      - Event
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      operationId: createEvent
      summary: Create event
      description: Create event
      tags:
      - Event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEvent'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /api/v1/event/{eventId}:
    get:
      operationId: findEventById
      summary: Read one event
      description: Read one event
      tags:
      - Event
      parameters:
      - $ref: '#/components/parameters/eventId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedEvent'
    put:
      operationId: updateEvent
      summary: Update event
      description: Update event
      tags:
      - Event
      parameters:
      - $ref: '#/components/parameters/eventId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedEvent'
    delete:
      operationId: deleteEvent
      summary: Delete event
      description: Delete event
      tags:
      - Event
      parameters:
      - $ref: '#/components/parameters/eventId'
      responses:
        "204":
          description: No content
  /api/v1/eventVideo:
    put:
      operationId: addVideoToEvent
      summary: Add video to event
      description: Add video to event
      tags:
      - EventVideo
      parameters:
      - name: eventId
        in: query
        required: true
        schema:
          type: string
          format: uuid
      - name: videoId
        in: query
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedEvent'
    delete:
      operationId: removeVideoFromEvent
      summary: Delete video from event
      description: Delete video from event
      tags:
      - EventVideo
      parameters:
      - name: eventId
        in: query
        required: true
        schema:
          type: string
          format: uuid
      - name: videoId
        in: query
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedEvent'
  /api/v1/metrics:
    get:
      operationId: getMetrics
      summary: Read metrics
      description: Read metrics
      tags:
      - Metrics
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BssMetrics'
security:
- oidc: []
components:
  securitySchemes:
    oidc:
      type: openIdConnect
      openIdConnectUrl: "https://authelia.vault.csik.dev/.well-known/openid-configuration"
  parameters:
    memberId:
      name: memberId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    videoId:
      name: videoId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    eventId:
      name: eventId
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    Sort:
      type: object
      properties:
        direction:
          type: string
          enum:
          - ASC
          - DESC
        property:
          type: string
        ignoreCase:
          type: boolean
        nullHandling:
          type: string
          enum:
          - NATIVE
          - NULLS_FIRST
          - NULLS_LAST
        ascending:
          type: boolean
        descending:
          type: boolean
    Pageable:
      type: object
      properties:
        pageNumber:
          type: integer
        pageSize:
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        offset:
          type: integer
        paged:
          type: boolean
        unpaged:
          type: boolean
    Page:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/Pageable'
        last:
          type: boolean
        totalPages:
          type: integer
        totalElements:
          type: integer
        first:
          type: boolean
        size:
          type: integer
        number:
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        numberOfElements:
          type: integer
        empty:
          type: boolean
    Status:
      type: string
      nullable: false
      enum:
      - ALUMNI
      - ACTIVE_ALUMNI
      - MEMBER
      - MEMBER_CANDIDATE
      - MEMBER_CANDIDATE_CANDIDATE
    CreateMember:
      type: object
      properties:
        url:
          type: string
          nullable: false
        name:
          type: string
          nullable: false
    UpdateMember:
      allOf:
      - $ref: '#/components/schemas/CreateMember'
      - type: object
        properties:
          nickname:
            type: string
            nullable: false
          description:
            type: string
            nullable: false
          joinedAt:
            type: string
            nullable: false
          role:
            type: string
            nullable: false
          status:
            $ref: '#/components/schemas/Status'
          archived:
            type: boolean
            nullable: false
    Member:
      allOf:
      - type: object
        properties:
          id:
            type: string
            format: uuid
            nullable: false
      - $ref: '#/components/schemas/UpdateMember'
    CreateVideo:
      type: object
      properties:
        title:
          type: string
          nullable: false
    UpdateVideo:
      allOf:
      - $ref: '#/components/schemas/CreateVideo'
      - type: object
        properties:
          urls:
            type: array
            items:
              type: string
            nullable: false
          description:
            type: string
            nullable: false
          shootingDateStart:
            type: string
            format: date
            nullable: false
          shootingDateEnd:
            type: string
            format: date
            nullable: false
          visible:
            type: boolean
            nullable: false
          labels:
            type: array
            items:
              type: string
            nullable: false
    Video:
      allOf:
      - type: object
        properties:
          id:
            type: string
            format: uuid
            nullable: false
      - $ref: '#/components/schemas/UpdateVideo'
    DetailedVideo:
      allOf:
      - $ref: '#/components/schemas/Video'
      - type: object
        properties:
          crew:
            type: array
            items:
              $ref: '#/components/schemas/VideoCrew'
    VideoCrew:
      type: object
      properties:
        videoId:
          type: string
          format: uuid
        position:
          type: string
        member:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
            nickname:
              type: string
    CreateLabel:
      type: object
      properties:
        name:
          type: string
          nullable: false
        description:
          type: string
          nullable: false
    Label:
      allOf:
      - type: object
        properties:
          id:
            type: string
            format: uuid
            nullable: false
      - $ref: '#/components/schemas/CreateLabel'
    CreateEvent:
      type: object
      properties:
        url:
          type: string
        title:
          type: string
    UpdateEvent:
      allOf:
      - $ref: '#/components/schemas/CreateEvent'
      - type: object
        properties:
          description:
            type: string
          dateFrom:
            type: string
            format: date
          dateTo:
            type: string
            format: date
          visible:
            type: boolean
    Event:
      allOf:
      - type: object
        properties:
          id:
            type: string
            format: uuid
      - $ref: '#/components/schemas/UpdateEvent'
    DetailedEvent:
      allOf:
      - $ref: '#/components/schemas/Event'
      - type: object
        properties:
          videos:
            type: array
            items:
              $ref: '#/components/schemas/Video'
    BssMetrics:
      type: object
      properties:
        videoCount:
          type: integer
        eventCount:
          type: integer
        memberCount:
          type: integer
