services:
  app:
    build:
      context: "./"
    ports:
      - "127.0.0.1:8080:8080"
    healthcheck:
      test: "wget --tries=1 --no-verbose -qO- http://localhost:8080/actuator/health | grep -q UP"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    depends_on:
      - postgres
    environment:
      bss.file-api.url: "http://mock-file-api:8080"
      spring.security.oauth2.resourceserver.opaquetoken.introspection-uri: http://mock-oidc/dex/token/introspect
      spring.security.oauth2.resourceserver.opaquetoken.client-id: example-app
      spring.security.oauth2.resourceserver.opaquetoken.client-secret: ZXhhbXBsZS1hcHAtc2VjcmV0
      spring.datasource.url: "jdbc:postgresql://postgres:5432/bss?currentSchema=private"
      spring.datasource.username: "user"
      spring.datasource.password: "password"
      spring.flyway.default-schema: "private"
      spring.flyway.schemas: "private,public"
      management.endpoints.web.exposure.include: "prometheus,health"

  postgres:
    # update server/data/src/test/resources/application.yml
    image: "postgres:16.3-alpine3.18"
    environment:
      POSTGRES_DB: "bss"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: "pg_isready -q -U postgres"
      start_period: 5s
      interval: 30s
      timeout: 5s
      retries: 3
  mock-file-api:
    image: "wiremock/wiremock:3.13.1"
    ports:
      - "127.0.0.1:8888:8080"
    healthcheck:
      test: "curl -fs http://localhost:8080/__admin/docs > /dev/null || exit 1"
      start_period: 5s
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - "./stubs:/home/wiremock/mappings"
  mock-oidc:
    image: "dexidp/dex:v2.43.1-alpine"
    ports:
      - "127.0.0.1:5556:5556"
    volumes:
      - ./docker/dex/config.yml:/etc/dex/config.yml
    command: ["dex", "serve", "/etc/dex/config.yml"]
    healthcheck:
      test: "wget --tries=1 --no-verbose -qO- http://0.0.0.0:5556/dex/.well-known/openid-configuration"
      start_period: 2s
      interval: 30s
      timeout: 5s
      retries: 3

  prometheus:
    image: "prom/prometheus:v3.5.0"
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - "./docker/prometheus.yml:/etc/prometheus/prometheus.yml"
    profiles:
      - metrics
    healthcheck:
      test: wget --tries=1 --no-verbose -qO- http://localhost:9090/-/ready | grep -q "Prometheus Server is Ready."
      start_period: 5s
      interval: 30s
      timeout: 5s
      retries: 3
  grafana:
    image: "grafana/grafana:12.0.2-ubuntu"
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - "./docker/grafana:/var/lib/grafana"
    profiles:
      - metrics
    depends_on:
      - prometheus
    healthcheck:
      test: curl -fs http://localhost:3000/api/health | grep -q "\"ok\""
